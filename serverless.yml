service: croupier
frameworkVersion: "3"

# plugin order matters
plugins:
  - serverless-plugin-typescript
  - serverless-offline

provider:
  name: aws
  runtime: nodejs18.x
  environment:
    DYNAMODB_PROJECT_TABLE: ${self:service}-projectTable-${sls:stage}
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "dynamodb:PutItem"
            - "dynamodb:GetItem"
          Resource: arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:service}-projectTable-${sls:stage}
        - Effect: "Allow"
          Action:
            - "dynamodb:Query"
          Resource: arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:service}-projectTable-${sls:stage}/index/*
        - Effect: "Allow"
          Action:
            - "ssm:GetParameter"
          Resource: arn:aws:ssm:${aws:region}:${aws:accountId}:parameter/croupier-google-service-account-key
  httpApi:
    authorizers:
      serviceAuthorizer:
        identitySource: $request.header.Authorization
        issuerUrl:
          Fn::Join:
          - ''
          - - 'https://cognito-idp.'
            - '${aws:region}'
            - '.amazonaws.com/'
            - Ref: serviceUserPool
        audience:
          - Ref: serviceUserPoolClient

functions:
  getOneProject:
    handler: src/handler.getOneProject
    events:
      - httpApi:
          path: /projects/{groupme_group_id}
          method: get
          authorizer:
            name: serviceAuthorizer
  getProjects:
    handler: src/handler.getProjects
    events:
      - httpApi:
          path: /projects
          method: get
          authorizer:
            name: serviceAuthorizer
  createProject:
    handler: src/handler.createProject
    events:
      - httpApi:
          path: /projects
          method: post
          authorizer:
            name: serviceAuthorizer
  postMessage:
    handler: src/handler.postMessage
    timeout: 29
    layers:
      - arn:aws:lambda:us-east-1:177933569100:layer:AWS-Parameters-and-Secrets-Lambda-Extension:2
    events:
      - httpApi:
          path: /message
          method: post

resources:
  Resources:
    ProjectTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: groupme_group_id
            AttributeType: S
          - AttributeName: file_id
            AttributeType: S
          - AttributeName: subject
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        KeySchema:
          - AttributeName: groupme_group_id
            KeyType: HASH
          - AttributeName: file_id
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: subjectIndex
            KeySchema:
              - AttributeName: subject
                KeyType: HASH
              - AttributeName: groupme_group_id
                KeyType: RANGE
            Projection:
              ProjectionType: INCLUDE
              NonKeyAttributes:
                - drive_folder_id
                - groupme_bot_id
                - replacements
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        TableName: ${self:service}-projectTable-${sls:stage}
    serviceUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: croupier-user-pool-${sls:stage}
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
    serviceUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: croupier-user-pool-client-${sls:stage}
        AllowedOAuthFlows:
          - implicit
        AllowedOAuthFlowsUserPoolClient: true
        AllowedOAuthScopes:
          - phone
          - email
          - openid
          - profile
          - aws.cognito.signin.user.admin
        UserPoolId:
          Ref: serviceUserPool
        CallbackURLs: 
          - http://localhost:3000
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        GenerateSecret: false
        SupportedIdentityProviders: 
          - COGNITO
    serviceUserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain 
      Properties:
        UserPoolId: 
          Ref: serviceUserPool
        Domain: croupier-user-pool-domain-${sls:stage}
