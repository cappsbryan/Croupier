service: croupier
frameworkVersion: "3"

package:
  individually: true

# plugin order matters
plugins:
  - serverless-esbuild
  - serverless-offline

provider:
  name: aws
  runtime: nodejs18.x
  architecture: arm64
  environment:
    DYNAMODB_PROJECT_TABLE: ${self:service}-projectTable-${sls:stage}
    PROCESS_IMAGES_FUNCTION_NAME: ${self:service}-${sls:stage}-processImages
    USER_EVENT_RULE_NAME_PREFIX: ${self:service}-${sls:stage}-user-schedule-
    FILE_WATCHER_EVENT_RULE_NAME_PREFIX: ${self:service}-${sls:stage}-file-watcher-
    FILE_CHANGE_BASE_URL:
      Fn::Join:
      - ''
      - - 'https://'
        - !Ref HttpApi
        - '.execute-api.'
        - '${aws:region}'
        - '.amazonaws.com'
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "dynamodb:PutItem"
            - "dynamodb:GetItem"
            - "dynamodb:Query"
            - "dynamodb:UpdateItem"
            - "dynamodb:BatchWriteItem"
          Resource:
            - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:service}-projectTable-${sls:stage}
        - Effect: "Allow"
          Action:
            - "dynamodb:Query"
          Resource:
            - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:service}-projectTable-${sls:stage}/index/*
        - Effect: "Allow"
          Action:
            - "ssm:GetParameter"
          Resource:
            - arn:aws:ssm:${aws:region}:${aws:accountId}:parameter/${self:service}-google-service-account-key
            - arn:aws:ssm:${aws:region}:${aws:accountId}:parameter/${self:service}-groupme-access-token
        - Effect: "Allow"
          Action:
            - "lambda:InvokeFunction"
          Resource:
            - arn:aws:lambda:${aws:region}:${aws:accountId}:function:${self:service}-${sls:stage}-processImages
            - arn:aws:lambda:${aws:region}:${aws:accountId}:function:${self:service}-${sls:stage}-fileChangedWatcher
        - Effect: "Allow"
          Action:
            - "events:DescribeRule"
            - "events:PutRule"
            - "events:PutTargets"
          Resource:
            - arn:aws:events:${aws:region}:${aws:accountId}:rule/${self:service}-${sls:stage}-user-schedule-*
            - arn:aws:events:${aws:region}:${aws:accountId}:rule/${self:service}-${sls:stage}-file-watcher-*
        - Effect: "Allow"
          Action:
            - "lambda:GetPolicy"
            - "lambda:AddPermission"
          Resource:
            - arn:aws:lambda:${aws:region}:${aws:accountId}:function:${self:service}-${sls:stage}-dailyMessage
            - arn:aws:lambda:${aws:region}:${aws:accountId}:function:${self:service}-${sls:stage}-fileChangedWatcher
  httpApi:
    authorizers:
      serviceAuthorizer:
        identitySource: $request.header.Authorization
        issuerUrl:
          Fn::Join:
          - ''
          - - 'https://cognito-idp.'
            - '${aws:region}'
            - '.amazonaws.com/'
            - Ref: serviceUserPool
        audience:
          - Ref: serviceUserPoolClient

functions:
  getOneProject:
    handler: src/projects.getOne
    events:
      - httpApi:
          path: /projects/{groupId}
          method: get
          authorizer:
            name: serviceAuthorizer
  getProjects:
    handler: src/projects.getMine
    events:
      - httpApi:
          path: /projects
          method: get
          authorizer:
            name: serviceAuthorizer
  createProject:
    handler: src/projects.create
    events:
      - httpApi:
          path: /projects
          method: post
          authorizer:
            name: serviceAuthorizer
  updateOneProject:
    handler: src/projects.updateOne
    events:
      - httpApi:
          path: /projects/{groupId}
          method: put
          authorizer:
            name: serviceAuthorizer
  deleteOneProject:
    handler: src/projects.deleteOne
    timeout: 29
    events:
      - httpApi:
          path: /projects/{groupId}
          method: delete
          authorizer:
            name: serviceAuthorizer
  receiveMessage:
    handler: src/message.receiveMessage
    layers:
      - arn:aws:lambda:us-east-1:177933569100:layer:AWS-Parameters-and-Secrets-Lambda-Extension-Arm64:4
    events:
      - httpApi:
          path: /message
          method: post
  dailyMessage:
    handler: src/message.dailyMessage
    layers:
      - arn:aws:lambda:us-east-1:177933569100:layer:AWS-Parameters-and-Secrets-Lambda-Extension-Arm64:4
  setSchedule:
    handler: src/schedule.set
    environment:
      DAILY_MESSAGE_FUNCTION_ARN: !GetAtt DailyMessageLambdaFunction.Arn
      DAILY_MESSAGE_FUNCTION_NAME: !Ref DailyMessageLambdaFunction
    events:
      - httpApi:
          path: /projects/{groupId}/schedule
          method: put
          authorizer:
            name: serviceAuthorizer
  getSchedule:
    handler: src/schedule.get
    events:
      - httpApi:
          path: /projects/{groupId}/schedule
          method: get
          authorizer:
            name: serviceAuthorizer
  processImages:
    handler: src/images.process
    timeout: 300
    layers:
      - arn:aws:lambda:us-east-1:177933569100:layer:AWS-Parameters-and-Secrets-Lambda-Extension-Arm64:4
    environment:
      FILE_CHANGED_WATCHER_ARN: !GetAtt FileChangedWatcherLambdaFunction.Arn
      FILE_CHANGED_WATCHER_NAME: !Ref FileChangedWatcherLambdaFunction
  processImagesHTTP:
    handler: src/images.processHTTP
    timeout: 29
    layers:
      - arn:aws:lambda:us-east-1:177933569100:layer:AWS-Parameters-and-Secrets-Lambda-Extension-Arm64:4
    environment:
      FILE_CHANGED_WATCHER_ARN: !GetAtt FileChangedWatcherLambdaFunction.Arn
      FILE_CHANGED_WATCHER_NAME: !Ref FileChangedWatcherLambdaFunction
    events:
      - httpApi:
          path: /projects/{groupId}/process
          method: post
          authorizer:
            name: serviceAuthorizer
  checkProcess:
    handler: src/images.checkProcess
    timeout: 29
    layers:
      - arn:aws:lambda:us-east-1:177933569100:layer:AWS-Parameters-and-Secrets-Lambda-Extension-Arm64:4
    events:
      - httpApi:
          path: /projects/{groupId}/process
          method: get
          authorizer:
            name: serviceAuthorizer
  fileChangedWatcher:
    handler: src/changes.watch
    layers:
      - arn:aws:lambda:us-east-1:177933569100:layer:AWS-Parameters-and-Secrets-Lambda-Extension-Arm64:4
  fileChangedNotification:
    handler: src/changes.notify
    layers:
      - arn:aws:lambda:us-east-1:177933569100:layer:AWS-Parameters-and-Secrets-Lambda-Extension-Arm64:4
    events:
      - httpApi:
          path: /projects/{groupId}/notify
          method: post

resources:
  Resources:
    ProjectTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: groupId
            AttributeType: S
          - AttributeName: fileId
            AttributeType: S
          - AttributeName: subject
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 4
          WriteCapacityUnits: 4
        KeySchema:
          - AttributeName: groupId
            KeyType: HASH
          - AttributeName: fileId
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: subjectIndex
            KeySchema:
              - AttributeName: subject
                KeyType: HASH
              - AttributeName: groupId
                KeyType: RANGE
            Projection:
              ProjectionType: INCLUDE
              NonKeyAttributes:
                - folderId
                - botId
                - replacements
                - emojis
            ProvisionedThroughput:
              ReadCapacityUnits: 2
              WriteCapacityUnits: 2
        TableName: ${self:service}-projectTable-${sls:stage}
    serviceUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: croupier-user-pool-${sls:stage}
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
    serviceUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: croupier-user-pool-client-${sls:stage}
        AllowedOAuthFlows:
          - implicit
        AllowedOAuthFlowsUserPoolClient: true
        AllowedOAuthScopes:
          - phone
          - email
          - openid
          - profile
          - aws.cognito.signin.user.admin
        UserPoolId:
          Ref: serviceUserPool
        CallbackURLs: 
          - http://localhost:3000
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        GenerateSecret: false
        SupportedIdentityProviders: 
          - COGNITO
    serviceUserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain 
      Properties:
        UserPoolId: 
          Ref: serviceUserPool
        Domain: croupier-user-pool-domain-${sls:stage}
